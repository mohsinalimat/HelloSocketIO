// Generated by Apple Swift version 1.2 (swiftlang-602.0.49.6 clang-602.0.49)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
#if __has_feature(nullability)
#  define SWIFT_NULLABILITY(X) X
#else
# if !defined(__nonnull)
#  define __nonnull
# endif
# if !defined(__nullable)
#  define __nullable
# endif
# if !defined(__null_unspecified)
#  define __null_unspecified
# endif
#  define SWIFT_NULLABILITY(X)
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import ObjectiveC;
@import Dispatch;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIWindow;
@class UIApplication;
@class NSObject;

SWIFT_CLASS("_TtC13HelloSocketIO11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic) UIWindow * __nullable window;
- (BOOL)application:(UIApplication * __nonnull)application didFinishLaunchingWithOptions:(NSDictionary * __nullable)launchOptions;
- (void)applicationWillResignActive:(UIApplication * __nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * __nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * __nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * __nonnull)application;
- (void)applicationWillTerminate:(UIApplication * __nonnull)application;
- (SWIFT_NULLABILITY(nonnull) instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSArray;

SWIFT_CLASS("_TtC13HelloSocketIO14SocketAnyEvent")
@interface SocketAnyEvent
@property (nonatomic, readonly, copy) NSString * __null_unspecified event;
@property (nonatomic, readonly) NSArray * __nullable items;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithEvent:(NSString * __nonnull)event items:(NSArray * __nullable)items OBJC_DESIGNATED_INITIALIZER;
@end

@class NSHTTPCookie;
@class WebSocket;
@protocol SocketEngineClient;
@protocol NSURLSessionDelegate;
@class NSDictionary;
@class NSError;
@class NSData;

SWIFT_CLASS("_TtC13HelloSocketIO12SocketEngine")
@interface SocketEngine : NSObject
@property (nonatomic, readonly, copy) NSString * __nonnull logType;
@property (nonatomic, readonly) BOOL connected;
@property (nonatomic, weak) id <SocketEngineClient> __nullable client;
@property (nonatomic, copy) NSArray * __nullable cookies;
@property (nonatomic) BOOL log;
@property (nonatomic, readonly) BOOL polling;
@property (nonatomic, copy) NSString * __nonnull sid;
@property (nonatomic, copy) NSString * __nonnull socketPath;
@property (nonatomic, copy) NSString * __nullable urlPolling;
@property (nonatomic, copy) NSString * __nullable urlWebSocket;
@property (nonatomic, readonly) BOOL websocket;
@property (nonatomic) WebSocket * __nullable ws;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithClient:(id <SocketEngineClient> __nonnull)client sessionDelegate:(id <NSURLSessionDelegate> __nullable)sessionDelegate OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithClient:(id <SocketEngineClient> __nonnull)client opts:(NSDictionary * __nullable)opts;
- (void)closeWithFast:(BOOL)fast;
- (void)openWithOpts:(NSDictionary * __nullable)opts;
- (void)stopPolling;

/// Write a message, independent of transport. For Objective-C. withData should be an NSArray of NSData
- (void)writeObjc:(NSString * __nonnull)msg withType:(NSInteger)type withData:(NSArray * __nullable)data;
- (void)websocketDidConnect:(WebSocket * __nonnull)socket;
- (void)websocketDidDisconnect:(WebSocket * __nonnull)socket error:(NSError * __nullable)error;
- (void)websocketDidReceiveMessage:(WebSocket * __nonnull)socket text:(NSString * __nonnull)text;
- (void)websocketDidReceiveData:(WebSocket * __nonnull)socket data:(NSData * __nonnull)data;
@end


SWIFT_PROTOCOL("_TtP13HelloSocketIO18SocketEngineClient_")
@protocol SocketEngineClient
@property (nonatomic, readonly) dispatch_queue_attr_t __null_unspecified handleQueue;
@property (nonatomic, readonly, copy) NSString * __nonnull socketURL;
@property (nonatomic, readonly) BOOL secure;
- (void)didError:(id __nonnull)reason;
- (void)engineDidClose:(NSString * __nonnull)reason;
- (void)parseSocketMessage:(NSString * __nonnull)msg;
- (void)parseBinaryData:(NSData * __nonnull)data;
@end


SWIFT_CLASS("_TtC13HelloSocketIO14SocketIOClient")
@interface SocketIOClient : NSObject <SocketEngineClient>
@property (nonatomic, readonly, copy) NSString * __nonnull logType;
@property (nonatomic) NSInteger currentAck;
@property (nonatomic) BOOL log;
@property (nonatomic) id <NSURLSessionDelegate> __nullable sessionDelegate;
@property (nonatomic, readonly, copy) NSString * __nonnull socketURL;
@property (nonatomic, readonly) dispatch_queue_attr_t __null_unspecified handleAckQueue;
@property (nonatomic, readonly) dispatch_queue_attr_t __null_unspecified handleQueue;
@property (nonatomic, readonly) dispatch_queue_attr_t __null_unspecified emitQueue;
@property (nonatomic, readonly) BOOL closed;
@property (nonatomic, readonly) BOOL connected;
@property (nonatomic, readonly) BOOL connecting;
@property (nonatomic) SocketEngine * __nullable engine;
@property (nonatomic, copy) NSString * __nonnull nsp;
@property (nonatomic, copy) NSDictionary * __nullable opts;
@property (nonatomic) BOOL reconnects;
@property (nonatomic, readonly) BOOL reconnecting;
@property (nonatomic) NSInteger reconnectWait;
@property (nonatomic, readonly) BOOL secure;
@property (nonatomic, readonly, copy) NSString * __nullable sid;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithSocketURL:(NSString * __nonnull)socketURL options:(NSDictionary * __nullable)options;

/// Closes the socket. Only reopen the same socket if you know what you're doing.
/// Will turn off automatic reconnects.
/// Pass true to fast if you're closing from a background task
- (void)closeWithFast:(BOOL)fast;

/// Connect to the server.
- (void)connect;

/// Connect to the server. If we aren't connected after timeoutAfter, call handler
- (void)connectWithTimeoutAfter:(NSInteger)timeoutAfter withTimeoutHandler:(void (^ __nullable)(void))handler;
- (void)didConnect;
- (void)didDisconnect:(NSString * __nonnull)reason;

/// error
- (void)didError:(id __nonnull)reason;

/// Same as close
- (void)disconnectWithFast:(BOOL)fast;

/// Same as emit, but meant for Objective-C
- (void)emit:(NSString * __nonnull)event withItems:(NSArray * __nonnull)items;

/// Same as emitWithAck, but for Objective-C
- (void (^ __nonnull)(uint64_t, void (^ __nonnull)(NSArray * __nullable)))emitWithAck:(NSString * __nonnull)event withItems:(NSArray * __nonnull)items;
- (void)emitAck:(NSInteger)ack withData:(NSArray * __nonnull)args;
- (void)engineDidClose:(NSString * __nonnull)reason;
- (void)handleAck:(NSInteger)ack data:(id __nullable)data;

/// Leaves nsp and goes back to /
- (void)leaveNamespace;

/// Joins nsp if it is not /
- (void)joinNamespace;

/// Removes handler(s)
- (void)off:(NSString * __nonnull)event;

/// Adds a handler for an event.
- (void)on:(NSString * __nonnull)event callback:(void (^ __nonnull)(NSArray * __nullable, void (^ __nullable)(NSArray * __nonnull)))callback;

/// Removes all handlers.
/// Can be used after disconnecting to break any potential remaining retain cycles.
- (void)removeAllHandlers;

/// Adds a handler that will be called on every event.
- (void)onAny:(void (^ __nonnull)(SocketAnyEvent * __nonnull))handler;

/// Same as connect
- (void)open;
- (void)parseSocketMessage:(NSString * __nonnull)msg;
- (void)parseBinaryData:(NSData * __nonnull)data;

/// Trieds to reconnect to the server.
- (void)reconnect;
@end

@class NSRegularExpression;
@class NSTextCheckingResult;

SWIFT_CLASS("_TtC13HelloSocketIO10SwiftRegex")
@interface SwiftRegex : NSObject
@property (nonatomic, copy) NSString * __nonnull target;
@property (nonatomic) NSRegularExpression * __nonnull regex;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithTarget:(NSString * __nonnull)target pattern:(NSString * __nonnull)pattern options:(NSRegularExpressionOptions)options OBJC_DESIGNATED_INITIALIZER;
+ (void)failure:(NSString * __nonnull)message;
@property (nonatomic, readonly) NSRange targetRange;
- (NSString * __nullable)substring:(NSRange)range;
- (BOOL)doesMatchWithOptions:(NSMatchingOptions)options;
- (NSRange)rangeWithOptions:(NSMatchingOptions)options;
- (NSString * __nullable)matchWithOptions:(NSMatchingOptions)options;
- (NSArray * __nullable)groupsWithOptions:(NSMatchingOptions)options;
- (NSArray * __nullable)groupsForMatch:(NSTextCheckingResult * __null_unspecified)match;
- (NSString * __nullable)objectAtIndexedSubscript:(NSInteger)groupno;
- (void)setObject:(NSString * __nullable)newValue atIndexedSubscript:(NSInteger)groupno;
- (NSArray * __nullable)matchResultsWithOptions:(NSMatchingOptions)options;
- (NSArray * __nonnull)rangesWithOptions:(NSMatchingOptions)options;
- (NSArray * __nonnull)matchesWithOptions:(NSMatchingOptions)options;
- (NSDictionary * __nonnull)dictionaryWithOptions:(NSMatchingOptions)options;
- (NSString * __nonnull)substituteMatches:(NSString * __nonnull (^ __nonnull)(NSTextCheckingResult * __nonnull, BOOL * __null_unspecified))substitution options:(NSMatchingOptions)options;
@property (nonatomic, readonly) BOOL boolValue;
@end

@class UITextField;
@class UITextView;
@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC13HelloSocketIO14ViewController")
@interface ViewController : UIViewController
@property (nonatomic) IBOutlet UITextField * __null_unspecified textField;
@property (nonatomic) IBOutlet UITextView * __null_unspecified textView;
@property (nonatomic, readonly) SocketIOClient * __nonnull socket;
- (void)viewDidLoad;
- (IBAction)sendMessage:(id __nonnull)sender;
- (void)addHandlers;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithNibName:(NSString * __nullable)nibNameOrNil bundle:(NSBundle * __nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
@class NSStream;

SWIFT_CLASS("_TtC13HelloSocketIO9WebSocket")
@interface WebSocket : NSObject <NSStreamDelegate>
@property (nonatomic) dispatch_queue_t __null_unspecified queue;
@property (nonatomic, copy) NSArray * __nullable optionalProtocols;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSUpgradeName;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSUpgradeValue;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSHostName;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSConnectionName;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSConnectionValue;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSProtocolName;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSVersionName;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSVersionValue;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSKeyName;
@property (nonatomic, readonly, copy) NSString * __nonnull headerOriginName;
@property (nonatomic, readonly, copy) NSString * __nonnull headerWSAcceptName;
@property (nonatomic, readonly) NSInteger BUFFER_MAX;
@property (nonatomic, readonly) uint8_t FinMask;
@property (nonatomic, readonly) uint8_t OpCodeMask;
@property (nonatomic, readonly) uint8_t RSVMask;
@property (nonatomic, readonly) uint8_t MaskMask;
@property (nonatomic, readonly) uint8_t PayloadLenMask;
@property (nonatomic, readonly) NSInteger MaxFrameSize;
@property (nonatomic, copy) NSDictionary * __nonnull headers;
@property (nonatomic) BOOL voipEnabled;
@property (nonatomic) BOOL selfSignedSSL;
@property (nonatomic, readonly) BOOL isConnected;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url cookies:(NSArray * __nullable)cookies;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url protocols:(NSArray * __nonnull)protocols;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url protocols:(NSArray * __nonnull)protocols connect:(void (^ __nonnull)(void))connect disconnect:(void (^ __nonnull)(NSError * __nullable))disconnect text:(void (^ __nonnull)(NSString * __nonnull))text data:(void (^ __nonnull)(NSData * __nonnull))data;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url connect:(void (^ __nonnull)(void))connect disconnect:(void (^ __nonnull)(NSError * __nullable))disconnect text:(void (^ __nonnull)(NSString * __nonnull))text;
- (SWIFT_NULLABILITY(nonnull) instancetype)initWithUrl:(NSURL * __nonnull)url connect:(void (^ __nonnull)(void))connect disconnect:(void (^ __nonnull)(NSError * __nullable))disconnect data:(void (^ __nonnull)(NSData * __nonnull))data;

/// Connect to the websocket server on a background thread
- (void)connect;

/// disconnect from the websocket server
- (void)disconnect;

/// write a string to the websocket. This sends it as a text frame.
- (void)writeString:(NSString * __nonnull)str;

/// write binary data to the websocket. This sends it as a binary frame.
- (void)writeData:(NSData * __nonnull)data;
- (void)writePing:(NSData * __nonnull)data;
- (void)stream:(NSStream * __nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
@end

#pragma clang diagnostic pop
